import { useState } from 'react';
import { signInWithGoogle } from '../supabase';

const Auth = ({ user, setUser }) => {
  const [name, setName] = useState('');
  const [age, setAge] = useState('');
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);
  const [googleLoading, setGoogleLoading] = useState(false);

  const handleGoogleSignIn = async () => {
    setGoogleLoading(true);
    setError(null);
    
    try {
      console.log("üîç Aloitetaan Google OAuth kirjautuminen...");
      const { data, error } = await signInWithGoogle();
      
      if (error) {
        console.error("‚ùå Google OAuth virhe:", error);
        setError('Google-kirjautuminen ep√§onnistui: ' + error.message);
        return;
      }

      if (data?.user) {
        console.log("‚úÖ Google OAuth onnistui:", data.user);
        
        // Muunna Supabase user chattipalvelun k√§ytt√§j√§ksi
        const chatUser = {
          uid: 'google-' + data.user.id,
          displayName: data.user.user_metadata?.full_name || data.user.email?.split('@')[0],
          email: data.user.email,
          photoURL: data.user.user_metadata?.avatar_url,
          age: null, // Kysyt√§√§n erikseen
          createdAt: new Date().toISOString(),
          isGoogleUser: true
        };

        console.log("üîÑ Luotu chat-k√§ytt√§j√§ Google-datasta:", chatUser);
        setUser(chatUser);
      }
    } catch (error) {
      console.error("‚ùå Google OAuth ep√§onnistui:", error);
      setError('Google-kirjautuminen ep√§onnistui. Yrit√§ uudelleen.');
    } finally {
      setGoogleLoading(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError(null);
    setLoading(true);

    if (!name.trim()) {
      setError('Nimi on pakollinen');
      setLoading(false);
      return;
    }

    if (!age || age < 15) {
      setError('Ik√§ t√§ytyy olla v√§hint√§√§n 15 vuotta');
      setLoading(false);
      return;
    }

    try {
      console.log("üöÄ Aloitetaan kirjautuminen:", name.trim(), "ik√§:", age);
      
      // Luo yksinkertainen k√§ytt√§j√§objekti
      const newUser = {
        uid: 'user-' + Math.random().toString(36).substr(2, 9),
        displayName: name.trim(),
        age: parseInt(age),
        email: `${name.toLowerCase().replace(/\s+/g, '')}@chat-nuorille.local`,
        photoURL: null,
        createdAt: new Date().toISOString()
      };

      console.log("üíæ Luodaan k√§ytt√§j√§ (ei tallenneta):", newUser);
      
      // EI tallenneta localStorage:iin - aina kysyt√§√§n uudestaan
      
      console.log("‚úÖ K√§ytt√§j√§ luotu, asetetaan tilaan");
      
      // Aseta k√§ytt√§j√§ - t√§m√§ laukaisee siirtym√§n App.jsx:ss√§
      setUser(newUser);
      
      console.log("üéâ Kirjautuminen valmis, odotetaan siirtym√§√§...");
    } catch (error) {
      console.error('‚ùå Sis√§√§nkirjautumisvirhe:', error);
      setError('Jotain meni pieleen. Yrit√§ uudelleen.');
    }

    setLoading(false);
  };

  const handleSignOut = () => {
    // Poistetaan vain muistista - ei localStorage:ia
    setUser(null);
  };

  if (user) {
    return (
      <div className="auth-container">
        <div className="user-info">
          <div className="profile-image">üë§</div>
          <p>Tervetuloa, {user.displayName}!</p>
          <p>Ik√§: {user.age} vuotta</p>
          <button 
            onClick={handleSignOut} 
            className="sign-out-btn"
          >
            Kirjaudu ulos
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="auth-container">
      <div className="login-box">
        <h1>üí¨ Chat nuorille</h1>
        <p>T√§yt√§ tiedot. √Ñl√§ valehtele ik√§√§si!</p>
        
        {error && <div className="error-message">{error}</div>}
        
        <form onSubmit={handleSubmit} className="auth-form">
          <div className="form-group">
            <label htmlFor="name">Nimesi</label>
            <input
              id="name"
              type="text"
              value={name}
              onChange={(e) => setName(e.target.value)}
              placeholder="Kirjoita nimesi..."
              maxLength="30"
              required
            />
          </div>

          <div className="form-group">
            <label htmlFor="age">Ik√§si</label>
            <input
              id="age"
              type="number"
              value={age}
              onChange={(e) => setAge(e.target.value)}
              placeholder="Kirjoita ik√§si..."
              min="15"
              required
            />
          </div>

          <button 
            type="submit" 
            className="google-sign-in-btn"
            disabled={loading}
          >
            {loading ? 'Aloitetaan...' : 'üöÄ Aloita chattailu'}
          </button>
        </form>

        <div className="auth-divider">
          <span>tai</span>
        </div>

        <button 
          onClick={handleGoogleSignIn}
          className="google-oauth-btn"
          disabled={googleLoading}
        >
          {googleLoading ? (
            <>
              <span className="loading-spinner-small">‚ü≥</span>
              Kirjaudutaan...
            </>
          ) : (
            <>
              <img src="https://developers.google.com/identity/images/g-logo.png" alt="Google" className="google-icon" />
              Jatka Google-tilill√§
            </>
          )}
        </button>
        
        <div className="disclaimer">
          <p>K√§ytt√§m√§ll√§ palvelua hyv√§ksyt k√§ytt√∂ehtomme. K√§ytt√§ydymme vastuullisesti!</p>
        </div>
      </div>
    </div>
  );
};

export default Auth;